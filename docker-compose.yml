version: '3.7'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres:
    driver: local
  redis:
    driver: local
  mysql:
    driver: local
  mariadb:
    driver: local
  mongo:
    driver: local
  rabbitmq:
    driver: local
  netdata:
    driver: local
  portainer:
    driver: local


services:


  ### php-fpm ##############################################

  php-fpm:
    restart: always
    build:
      context: ./php-fpm
    volumes:
      # - ./php-fpm/config:/usr/local/etc
      - ${DIR_APP}:/var/www:${MOUNT}
      - ${DIR_LOG}/php:/var/log/php
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=serverName=asrorz
      - DOCKER_HOST=tcp://docker-in-docker:2375
      - FAKETIME=-0
    networks:
      - backend
    depends_on:
      - mysql
      - postgres
    links:
      - docker-in-docker
    stdin_open: true
    tty: true


  ### NGINX Server #########################################

  nginx:
    restart: always
    build:
      context: ./nginx
    volumes:
      - ${DIR_APP}:/var/www:${MOUNT}
      #- ${DIR_LOG}/nginx:/var/log/nginx
      #- ${DIR_LOG}/nginx-certify:/var/log/nginx-certify
      #- ${DIR_LOG}/nginx-redirec:/var/log/nginx-redirec
      #- ${DIR_LOG}/nginx-vhosts:/var/log/nginx-vhosts
      - ./nginx/config:/etc/nginx
      #- ./nginx/starts:/opt
    depends_on:
      - php-fpm
    ports:
      - ${PortHttp}:80
      - ${PortHttps}:443
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true


  ### Mariadb Alpine
  ##############################################

  mariadb:
    restart: always
    build: ./mariadb
    volumes:
      - mariadb:/var/lib/mysql
      - ${DIR_LOG}/mariadb:/var/log/mysql
    ports:
      - 127.0.0.1:${PortMaria}:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    networks:
      - backend
    stdin_open: true
    tty: true


  ### Mariadb Alpine
  ##############################################

  mysql:
    build: ./mysql
    restart: unless-stopped
    volumes:
      - mysql:/var/lib/mysql
      - ${DIR_LOG}/mysql:/var/log/mysql
    ports:
      - 127.0.0.1:${PortMySQL}:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQLDB_ROOT_PASSWORD}
    networks:
      - backend
    stdin_open: true
    tty: true



  ### PostgreSQL ###########################################

  postgres:
    restart: always
    build: ./postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    command: postgres -c config_file=/etc/postgres/postgresql.conf
    ports:
      - 127.0.0.1:${PortPostgres}:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_ROOT_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    stdin_open: true
    tty: true



  ### MongoDB ##############################################

  mongo:
    restart: always
    build: ./mongo
    ports:
      - 127.0.0.1:${PortMongo}:27017
    volumes:
      - mongo:/data/db
    networks:
      - backend
    stdin_open: true
    tty: true


  ### Redis ################################################
  redis:
    restart: always
    build: ./redis
    volumes:
      - redis:/data
    ports:
      - 127.0.0.1:${PortRedis}:6379
    networks:
      - backend
    stdin_open: true
    tty: true


  ### RabbitMQ #############################################
  
  rabbitmq:
    restart: always
    build: ./rabbitmq
    ports:
      - 127.0.0.1:5672:5672
      - 127.0.0.1:15672:15672
      - 127.0.0.1:15671:15671
    privileged: true
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    hostname: asrorz-rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - backend
    stdin_open: true
    tty: true





  ### Docker-in-Docker ################################################

  docker-in-docker:
    image: docker:dind
    privileged: true
    volumes:
      - ${DIR_APP}:/var/www
    expose:
      - 2375
    networks:
      - backend
    stdin_open: true
    tty: true
    



  ### NetData ################################################
  
  netdata:
    build:
      context: ./netdata
    cap_add:
      - SYS_PTRACE
    volumes:
      - netdata:/host
    ports:
      - 19999:19999
    networks:
      - backend
    stdin_open: true
    tty: true
    


  ### Portainer ################################################

  portainer:
    restart: always
    build:
      context: ./portainer
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - 9020:9000
    networks:
      - backend
    stdin_open: true
    tty: true

